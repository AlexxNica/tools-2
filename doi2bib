#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# doi2bib
#
# purpose:  get bibtex reference from DOI
# author:   François-Xavier Coudert
# e-mail:   fxcoudert@gmail.com
# updated:  2011-01-01
#

import sys
import urllib, urllib2
import xml.dom.minidom
import re
import unicodedata

def usage():
  print """\nUsage: doi2bib DOI [...]\n"""

def main():

  # Set our output to the right encoding if none was chosen
  import codecs, locale
  if sys.stdout.encoding is None:
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout)

  if len(sys.argv) < 2:
    usage()
    sys.exit(1)
  else:
    for doi in sys.argv[1:]:
      try:
	ref = getCrossRef(doi)
      except Exception as e:
	print >> sys.stderr, "Couldn't resolve DOI '" + doi + "' through CrossRef: " + str(e)
	return

      print bibtexEntry(ref)




################################################################
# LaTeX accents replacement
latexAccents = [
  [ u"à", "\\`a" ],	# Grave accent
  [ u"è", "\\`e" ],
  [ u"ì", "\\`{\\i}" ],
  [ u"ò", "\\`o" ],
  [ u"ù", "\\`u" ],
  [ u"ỳ", "\\`y" ],
  [ u"À", "\\`A" ],
  [ u"È", "\\`E" ],
  [ u"Ì", "\\`{\\I}" ],
  [ u"Ò", "\\`O" ],
  [ u"Ù", "\\`U" ],
  [ u"Ỳ", "\\`Y" ],
  [ u"á", "\\'a" ],	# Acute accent
  [ u"ć", "\\'c" ],
  [ u"é", "\\'e" ],
  [ u"í", "\\'{\\i}" ],
  [ u"ó", "\\'o" ],
  [ u"ú", "\\'u" ],
  [ u"ý", "\\'y" ],
  [ u"Á", "\\'A" ],
  [ u"É", "\\'E" ],
  [ u"Í", "\\'{\\I}" ],
  [ u"Ó", "\\'O" ],
  [ u"Ú", "\\'U" ],
  [ u"Ý", "\\'Y" ],
  [ u"â", "\\^a" ],	# Circumflex
  [ u"ê", "\\^e" ],
  [ u"î", "\\^{\\i}" ],
  [ u"ô", "\\^o" ],
  [ u"û", "\\^u" ],
  [ u"ŷ", "\\^y" ],
  [ u"Â", "\\^A" ],
  [ u"Ê", "\\^E" ],
  [ u"Î", "\\^{\\I}" ],
  [ u"Ô", "\\^O" ],
  [ u"Û", "\\^U" ],
  [ u"Ŷ", "\\^Y" ],
  [ u"ä", "\\\"a" ],	# Umlaut or dieresis
  [ u"ë", "\\\"e" ],
  [ u"ï", "\\\"{\\i}" ],
  [ u"ö", "\\\"o" ],
  [ u"ü", "\\\"u" ],
  [ u"ÿ", "\\\"y" ],
  [ u"Ä", "\\\"A" ],
  [ u"Ë", "\\\"E" ],
  [ u"Ï", "\\\"{\\I}" ],
  [ u"Ö", "\\\"O" ],
  [ u"Ü", "\\\"U" ],
  [ u"Ÿ", "\\\"Y" ],
  [ u"ã", "\\~{a}" ],	# Tilde
  [ u"ñ", "\\~{n}" ],
  [ u"ă", "\\u{a}" ],	# Breve
  [ u"ĕ", "\\u{e}" ],
  [ u"ŏ", "\\u{o}" ],
  [ u"š", "\\v{s}" ],	# Caron
  [ u"č", "\\v{c}" ],
  [ u"ç", "\\c{c}" ],	# Cedilla
  [ u"Ç", "\\c{C}" ],
  [ u"œ", "{\\oe}" ],	# Ligatures
  [ u"Œ", "{\\OE}" ],
  [ u"æ", "{\\ae}" ],
  [ u"Æ", "{\\AE}" ],
  [ u"å", "{\\aa}" ],
  [ u"Å", "{\\AA}" ],
  [ u"–", "--" ],	# Dashes
  [ u"—", "---" ],
  [ u"−", "--" ],
  [ u"ø", "{\\o}" ],	# Misc latin-1 letters
  [ u"Ø", "{\\O}" ],
  [ u"ß", "{\\ss}" ],
  [ u"¡", "{!`}" ],
  [ u"¿", "{?`}" ],
  [ u"\\", "\\\\" ],	# Characters that should be quoted
  [ u"~", "\\~" ],
  [ u"&", "\\&" ],
  [ u"$", "\\$" ],
  [ u"{", "\\{" ],
  [ u"}", "\\}" ],
  [ u"%", "\\%" ],
  [ u"#", "\\#" ],
  [ u"_", "\\_" ],
  [ u"≥", "$\\ge$" ],	# Math operators
  [ u"≤", "$\\le$" ],
  [ u"≠", "$\\neq$" ],
  [ u"©", "\copyright" ], # Misc
  [ u"ı", "{\\i}" ],
  [ u"α", "$\\alpha$" ],
  [ u"β", "$\\beta$" ],
  [ u"γ", "$\\gamma$" ],
  [ u"δ", "$\\delta$" ],
  [ u"ε", "$\\epsilon$" ],
  [ u"η", "$\\eta$" ],
  [ u"θ", "$\\theta$" ],
  [ u"λ", "$\\lambda$" ],
  [ u"µ", "$\\mu$" ],
  [ u"ν", "$\\nu$" ],
  [ u"π", "$\\pi$" ],
  [ u"σ", "$\\sigma$" ],
  [ u"τ", "$\\tau$" ],
  [ u"φ", "$\\phi$" ],
  [ u"χ", "$\\chi$" ],
  [ u"ψ", "$\\psi$" ],
  [ u"ω", "$\\omega$" ],
  [ u"°", "$\\deg$" ],
  [ u"‘", "`" ],	# Quotes
  [ u"’", "'" ],
  [ u"′", "$^\\prime$" ],
  [ u"“", "``" ],
  [ u"”", "''" ],
  [ u"‚", "," ],
  [ u"„", ",," ],
  [ u"\xa0", " " ],     # Unprintable characters
]
latexTranslationTable = dict([(ord(k), unicode(v)) for k, v in latexAccents])

def replaceLatexAccents(str):
  s = unicodedata.normalize('NFC', str)
  return s.translate(latexTranslationTable)


################################################################
def validateDOI(doi):
  # We check that the DOI can be resolved by official means.  If so, we
  # return the resolved URL, otherwise, we return None (which means the
  # DOI is invalid).
  try:
    handle = urllib2.urlopen("http://dx.doi.org/" + doi)
  except:
    return None

  resolvedURL = handle.geturl()
  if resolvedURL[0:18] == "http://dx.doi.org/":
    return None
  else:
    return resolvedURL


################################################################
# CrossRef queries
#
# CrossRef documentation comes from here:
# http://labs.crossref.org/site/quick_and_dirty_api_guide.html
#
# You need a CrossRef API key. 
#
crossRefKey = "fx.coudert@chimie-paristech.fr"
#
# Using Google allows one to find other API keys:
# zter:zter321
# ourl_rdmpage:peacrab
# egon@spenglr.com
# s_allannz@yahoo.com
# dollar10boy@hotmail.com


def getCrossRef(doi):

  # Get the XML from CrossRef
  params = urllib.urlencode({ "id" : "doi:" + doi, "noredirect" : "true",
                              "pid" : crossRefKey, "format" : "unixref" })
  url = urllib2.Request("http://www.crossref.org/openurl/?" + params)

  doc = urllib2.urlopen(url).read()

  # Parse it
  doc = xml.dom.minidom.parseString (doc)
  records = doc.getElementsByTagName("journal")

  # No results. Is it a valid DOI?
  if (len(records) == 0):
    res = validateDOI(doi)
    if res is None:
      raise Exception("Invalid DOI")
    else:
      raise Exception("Can't locate metadata")

  if (len(records) != 1):
    raise Exception("CrossRef returned more than one record")

  record = records[0]

  # Helper functions
  def findItemNamed(container, name):
    list = container.getElementsByTagName(name)
    if (len(list) == 0):
      return None
    else:
      return list[0]
  def data(node):
    if node is None:
      return None
    else:
      return node.firstChild.data

  res = {}

  # Journal information
  journal = findItemNamed(record, "journal_metadata")
  if (journal):
    res["fullJournal"] = data(findItemNamed(journal, "full_title"))
    res["shortJournal"] = data(findItemNamed(journal, "abbrev_title"))

  # Volume information
  issue = findItemNamed(record, "journal_issue")
  res["issue"] = data(findItemNamed(issue, "issue"))
  res["volume"] = data(findItemNamed(issue, "volume"))
  res["year"] = data(findItemNamed(issue, "year"))

  # Other information
  other = findItemNamed(record, "journal_article")
  res["title"] = data(findItemNamed(other, "title"))
  res["firstPage"] = data(findItemNamed(other, "first_page"))
  res["lastPage"] = data(findItemNamed(other, "last_page"))
  res["doi"] = data(findItemNamed(other, "doi"))
  if res["year"] is None:
    res["year"] = data(findItemNamed(other, "year"))

  # Author list
  res["authors"] = []
  for node in other.getElementsByTagName("person_name"):
    surname = data(findItemNamed(node, "surname"))
    givenName = data(findItemNamed(node, "given_name"))

    if givenName is None:
      res["authors"].append(surname)
    elif surname is None:
      res["authors"].append(givenName)
    else:
      res["authors"].append(surname + ", " + givenName)

  # Create a citation key
  r = re.compile("\W")
  if len(res["authors"]) > 0:
    key = r.sub('', res["authors"][0].split(",")[0])
  else:
    key = ""
  if res["year"] is not None:
    key = key + res["year"]
  res["key"] = key

  return res


def bibtexEntry(ref):

  # Output all information in bibtex format
  latex = replaceLatexAccents
  s = "@article{" + ref["key"] + ",\n"

  if len(ref["authors"]) > 0:
    s = s + "  author = { " + latex(" and ".join(ref["authors"])) + " },\n"

  if ref["title"] is not None:
    s = s + "  title = { " + latex(ref["title"]) + " },\n"
  if ref["shortJournal"] is not None:
    s = s + "  journal = { " + latex(ref["shortJournal"]) + " },\n"
  if ref["year"] is not None:
    s = s + "  year = { " + latex(ref["year"]) + " },\n"
  if ref["volume"] is not None:
    s = s + "  volume = { " + latex(ref["volume"]) + " },\n"
  if ref["issue"] is not None:
    s = s + "  issue = { " + latex(ref["issue"]) + " },\n"
  if ref["firstPage"] is not None:
    if ref["lastPage"] is not None:
      s = s + "  pages = { " + latex(ref["firstPage"]) + "--" + latex(ref["lastPage"]) + " },\n"
    else:
      s = s + "  pages = { " + latex(ref["firstPage"]) + " },\n"

  s = s + "}"
  return s


if __name__ == '__main__':
    main()
